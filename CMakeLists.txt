# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(TTD_BUILD_EXAMPLES "" ${CMKR_ROOT_PROJECT})
option(TTD_PYTHON_BINDINGS "" ${CMKR_ROOT_PROJECT})

# Variables
set(PYBIND11_FINDPYTHON ON)

project(ttd-bindings)

include(FetchContent)

if(TTD_PYTHON_BINDINGS) # TTD_PYTHON_BINDINGS
	message(STATUS "Fetching pybind11 (v2.10.3)...")
	FetchContent_Declare(pybind11
		GIT_REPOSITORY
			"https://github.com/pybind/pybind11"
		GIT_TAG
			v2.10.3
	)
	FetchContent_MakeAvailable(pybind11)

endif()
# Target: TTD
set(TTD_SOURCES
	"TTD/TTD.cpp"
	"TTD/sha256.cpp"
	"TTD/utils.cpp"
	"TTD/TTD.hpp"
	"TTD/csts.h"
	"TTD/sha256.h"
	"TTD/utils.h"
	cmake.toml
)

add_library(TTD STATIC)

target_sources(TTD PRIVATE ${TTD_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${TTD_SOURCES})

add_library(TTD::TTD ALIAS TTD)
target_include_directories(TTD PUBLIC
	.
)

# Target: pyTTD
if(TTD_PYTHON_BINDINGS) # TTD_PYTHON_BINDINGS
	set(pyTTD_SOURCES
		"python-bindings/module.cpp"
		cmake.toml
	)

	pybind11_add_module(pyTTD ${pyTTD_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${pyTTD_SOURCES})

	target_link_libraries(pyTTD PUBLIC
		TTD::TTD
	)

endif()
# Target: example_api
if(TTD_BUILD_EXAMPLES) # TTD_BUILD_EXAMPLES
	set(example_api_SOURCES
		"example_api/main.cpp"
		cmake.toml
	)

	add_executable(example_api)

	target_sources(example_api PRIVATE ${example_api_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_api_SOURCES})

	target_link_libraries(example_api PRIVATE
		TTD::TTD
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example_api)
	endif()

endif()
# Target: example_calltree
if(TTD_BUILD_EXAMPLES) # TTD_BUILD_EXAMPLES
	set(example_calltree_SOURCES
		"example_calltree/main.cpp"
		cmake.toml
	)

	add_executable(example_calltree)

	target_sources(example_calltree PRIVATE ${example_calltree_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_calltree_SOURCES})

	target_link_libraries(example_calltree PRIVATE
		TTD::TTD
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example_calltree)
	endif()

endif()
# Target: example_cov
if(TTD_BUILD_EXAMPLES) # TTD_BUILD_EXAMPLES
	set(example_cov_SOURCES
		"example_cov/main.cpp"
		cmake.toml
	)

	add_executable(example_cov)

	target_sources(example_cov PRIVATE ${example_cov_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_cov_SOURCES})

	target_link_libraries(example_cov PRIVATE
		TTD::TTD
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example_cov)
	endif()

endif()
# Target: example_diff
if(TTD_BUILD_EXAMPLES) # TTD_BUILD_EXAMPLES
	set(example_diff_SOURCES
		"example_diff/main.cpp"
		cmake.toml
	)

	add_executable(example_diff)

	target_sources(example_diff PRIVATE ${example_diff_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_diff_SOURCES})

	target_link_libraries(example_diff PRIVATE
		TTD::TTD
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example_diff)
	endif()

endif()
# Target: example_tenet
if(TTD_BUILD_EXAMPLES) # TTD_BUILD_EXAMPLES
	set(example_tenet_SOURCES
		"example_tenet/main.cpp"
		cmake.toml
	)

	add_executable(example_tenet)

	target_sources(example_tenet PRIVATE ${example_tenet_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${example_tenet_SOURCES})

	target_link_libraries(example_tenet PRIVATE
		TTD::TTD
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT example_tenet)
	endif()

endif()
